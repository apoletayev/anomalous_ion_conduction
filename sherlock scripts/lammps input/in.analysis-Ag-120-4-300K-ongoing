###############################################
# ---------- Parameters for Sweeps ---------- #
###############################################

# clear                           ## make LAMMPS start from "fresh" with defaults

## THIS RELIES ON A VARIABLE, iter, to be passed via the command line

variable metal string 'Ag'      ## metal for sweeps
variable stoich equal 120       ## stoichiometry in the name of the input structure file
variable exclude equal 4        ## [sites], min distance btwn defects in the input structure file
variable T1 equal 300           ## [K], the steady-state temperature

read_restart restart-${metal}-${stoich}-${exclude}-${T1}K.*      ## start the latest restart file

variable field equal 0          ## field strength [GV/m]
variable thetadeg equal 90      ## 0 is || x,  90 is || y
variable phideg equal 0         ## 0 is || xy, 90 is || z

variable oscillate equal v_field/10  ## temporal shape for E-field: none for PEPPEx
variable theta equal v_thetadeg*3.1415926/180        ## theta=0 is x, theta=pi/2 is y
variable phi   equal v_phideg*3.1415926/180          ## phi = 0 is x, phi = pi/2 is z

variable Ex equal v_oscillate*cos(v_theta)*cos(v_phi)   ## E field in x direction
variable Ey equal v_oscillate*sin(v_theta)*cos(v_phi)   ## E field in y direction
variable Ez equal v_oscillate*sin(v_phi)                ## E field in z direction

# variable fname string ${metal}-${stoich}-${exclude}-${T1}K-${field}GVm-${iter} ## filename to write out
variable fname string ${metal}-${stoich}-${exclude}-${T1}K-${iter} ## filename to write out

##########################################################
# ---------------------- Cell -------------------------- #
##########################################################

## Skip

variable Timer equal step*dt  ## set a variable that reads out the time in ps in the output

#########################################################
# --------- Pair styles and electrostatics ------------ #
#########################################################

## Skip

kspace_style pppm 1e-05 #defines the solver for Coulombic interactions, something you shouldn't have to change

########################################################
# -------------- Run Minimization -------------------- #
########################################################

## Skip

########################################################
# -------------- Relax Cell -------------------------- #
########################################################

## Skip

########################################################
# ---------------- Run NPT Anneal -------------------- #
########################################################

## Skip

#############################################
# ------------- Run NVT T1 ---------------- #
#############################################

# reset_timestep 0
timestep 0.001                                  ## 1 femtosecond
fix             3 all nvt temp ${T1} ${T1} 0.01 ## NVT run for temp defined above, 10fs damping
thermo_style custom step v_Timer cpu temp etotal fmax vol press
thermo 1000

# dump 4 all atom 50 traj_all_${fname}.dat          ## dump atom positions every 50 steps to traj.dat
dump 5 sodium atom 25 traj_${fname}-${metal}.dat  ## dump mobile ion positions every 50 steps
dump_modify 5 sort id

## output per-atom velocities of mobile ions for VACF's
# dump        M_vels sodium custom 10 vels_${fname}-${metal}.dat id type vx vy vz
# dump_modify M_vels sort id

# dump        Oi_vels ointer custom 10 vels_${fname}-Oi.dat id type vx vy vz
# dump_modify Oi_vels sort id

# dump        Op_vels oplane custom 10 vels_${fname}-Op.dat id type vx vy vz
# dump_modify Op_vels sort id

compute a2 sodium msd/nongauss              ## compute r^2, r^4, and non-gaussian alpha^2 for the mobile ions
fix a2_fix sodium ave/time 5 2 10 c_a2[1] c_a2[2] c_a2[3] file a2_ave_${fname}-${metal}.fix ave window 2 mode scalar ## write a2 to file
# fix a2_fix sodium ave/time 5 5 25 c_a2[1] c_a2[2] c_a2[3] file a2_ave_long.fix ave window 2 mode scalar ## write a2 to file

# # compute and write the M-M radial distribution function every 10fs
# compute MM_rdf sodium rdf 160 cutoff 8       ## RDF Na-Na, later to be time-windowed (global, vector)
# fix MM_rdf_ave sodium ave/time 1 5 5 c_MM_rdf[*] file m_m_rdf_${fname}.fix ave window 2 mode vector ## write RDF to file w/averaging

# ## compute and write the M-Ointer radial distribution function every 10fs
# compute MOi_rdf m_ointer rdf 160 1 4 cutoff 8       ## RDF Na-Ointer, later to be time-windowed (global, vector)
# fix MOi_rdf_ave m_ointer ave/time 1 5 5 c_MOi_rdf[*] file m_oi_rdf_${fname}.fix ave window 2 mode vector ## write RDF to file w/averaging

# ## compute and write the M-O (all) radial distribution function every 10fs
# compute MO_rdf m_oall rdf 160 1 3* cutoff 8       ## RDF Na-O (all O), later to be time-windowed (global, vector)
# fix MO_rdf_ave m_oall ave/time 1 5 5 c_MO_rdf[*] file m_o_rdf_${fname}.fix ave window 2 mode vector ## write RDF to file w/averaging

# compute and write the Na-Everything radial distribution function every 10fs
# compute M_rdf all rdf 160 1 * cutoff 8       ## RDF Na-everything, later to be time-windowed (global, vector)
# fix M_rdf_ave all ave/time 1 5 5 c_M_rdf[*] file m_all_rdf_${fname}.fix ave window 2 mode vector ## write RDF to file w/averaging

# compute by-element temperatures: only relevant when there is a pulse
# compute temp_M sodium temp/com        ## M  temperature subtracting CoM velocity (global, scalar + vector)
# compute temp_A alumin temp/com        ## Al temperature subtracting CoM velocity (global, scalar + vector)
# compute temp_Ob oblock temp/com       ## Ob  temperature subtracting CoM velocity (global, scalar + vector)
# compute temp_Op oplane temp/com       ## Op  temperature subtracting CoM velocity (global, scalar + vector)
# compute temp_Oi ointer temp/com       ## Oi  temperature subtracting CoM velocity (global, scalar + vector)
# fix temp_com all ave/time 1 5 5 c_temp_M c_temp_A c_temp_Ob c_temp_Op c_temp_Oi file temp_com_${fname}.fix

## compute center-of-mass displacement: relevant with a pulse + for conductivity

variable Alrcmx equal xcm(alumin,x)   ## center of mass position Al (global, scalar)
variable Alvcmx equal vcm(alumin,x)   ## center of mass velocity Al (global, scalar)
variable Alrcmy equal xcm(alumin,y)   ## center of mass position Al (global, scalar)
variable Alvcmy equal vcm(alumin,y)   ## center of mass velocity Al (global, scalar)
variable Alrcmz equal xcm(alumin,z)   ## center of mass position Al (global, scalar)
variable Alvcmz equal vcm(alumin,z)   ## center of mass velocity Al (global, scalar)
fix cm_alumin alumin ave/time 5 2 10 v_Alrcmx v_Alrcmy v_Alrcmz v_Alvcmx v_Alvcmy v_Alvcmz file cm_${fname}-Al.fix

variable Orcmx equal xcm(ox_all,x)    ## center of mass position oxygen (global, scalar)
variable Ovcmx equal vcm(ox_all,x)    ## center of mass velocity oxygen (global, scalar)
variable Orcmy equal xcm(ox_all,y)    ## center of mass position oxygen (global, scalar)
variable Ovcmy equal vcm(ox_all,y)    ## center of mass velocity oxygen (global, scalar)
variable Orcmz equal xcm(ox_all,z)    ## center of mass position oxygen (global, scalar)
variable Ovcmz equal vcm(ox_all,z)    ## center of mass velocity oxygen (global, scalar)
fix cm_oxygen ox_all ave/time 5 2 10 v_Orcmx v_Orcmy v_Orcmz v_Ovcmx v_Ovcmy v_Ovcmz file cm_${fname}-O.fix

## write Oi CoM position + velocity
variable oircmx equal xcm(ointer,x)      ## center of mass position sodium (global, scalar)
variable oivcmx equal vcm(ointer,x)      ## center of mass velocity sodium (global, scalar)
variable oircmy equal xcm(ointer,y)      ## center of mass position sodium (global, scalar)
variable oivcmy equal vcm(ointer,y)      ## center of mass velocity sodium (global, scalar)
variable oircmz equal xcm(ointer,z)      ## center of mass position sodium (global, scalar)
variable oivcmz equal vcm(ointer,z)      ## center of mass velocity sodium (global, scalar)
fix cm_ointer ointer ave/time 5 2 10 v_oircmx v_oircmy v_oircmz v_oivcmx v_oivcmy v_oivcmz file cm_${fname}-Oi.fix

## write Oplane CoM position + velocity
variable oprcmx equal xcm(oplane,x)      ## center of mass position sodium (global, scalar)
variable opvcmx equal vcm(oplane,x)      ## center of mass velocity sodium (global, scalar)
variable oprcmy equal xcm(oplane,y)      ## center of mass position sodium (global, scalar)
variable opvcmy equal vcm(oplane,y)      ## center of mass velocity sodium (global, scalar)
variable oprcmz equal xcm(oplane,z)      ## center of mass position sodium (global, scalar)
variable opvcmz equal vcm(oplane,z)      ## center of mass velocity sodium (global, scalar)
fix cm_oplane oplane ave/time 5 2 10 v_oprcmx v_oprcmy v_oprcmz v_opvcmx v_opvcmy v_opvcmz file cm_${fname}-Op.fix

## write Oblock CoM position + velocity
variable obrcmx equal xcm(oblock,x)      ## center of mass position sodium (global, scalar)
variable obvcmx equal vcm(oblock,x)      ## center of mass velocity sodium (global, scalar)
variable obrcmy equal xcm(oblock,y)      ## center of mass position sodium (global, scalar)
variable obvcmy equal vcm(oblock,y)      ## center of mass velocity sodium (global, scalar)
variable obrcmz equal xcm(oblock,z)      ## center of mass position sodium (global, scalar)
variable obvcmz equal vcm(oblock,z)      ## center of mass velocity sodium (global, scalar)
fix cm_oblock oplane ave/time 5 2 10 v_obrcmx v_obrcmy v_obrcmz v_obvcmx v_obvcmy v_obvcmz file cm_${fname}-Ob.fix

## write metal CoM position + velocity
variable Mrcmx equal xcm(sodium,x)      ## center of mass position sodium (global, scalar)
variable Mvcmx equal vcm(sodium,x)      ## center of mass velocity sodium (global, scalar)
variable Mrcmy equal xcm(sodium,y)      ## center of mass position sodium (global, scalar)
variable Mvcmy equal vcm(sodium,y)      ## center of mass velocity sodium (global, scalar)
variable Mrcmz equal xcm(sodium,z)      ## center of mass position sodium (global, scalar)
variable Mvcmz equal vcm(sodium,z)      ## center of mass velocity sodium (global, scalar)
fix cm_metal sodium ave/time 5 2 10 v_Mrcmx v_Mrcmy v_Mrcmz v_Mvcmx v_Mvcmy v_Mvcmz file cm_${fname}-${metal}.fix

## write plane CoM position + velocity
variable prcmx equal xcm(planeatoms,x)      ## center of mass position sodium (global, scalar)
variable pvcmx equal vcm(planeatoms,x)      ## center of mass velocity sodium (global, scalar)
variable prcmy equal xcm(planeatoms,y)      ## center of mass position sodium (global, scalar)
variable pvcmy equal vcm(planeatoms,y)      ## center of mass velocity sodium (global, scalar)
variable prcmz equal xcm(planeatoms,z)      ## center of mass position sodium (global, scalar)
variable pvcmz equal vcm(planeatoms,z)      ## center of mass velocity sodium (global, scalar)
fix cm_plane planeatoms ave/time 5 2 10 v_prcmx v_prcmy v_prcmz v_pvcmx v_pvcmy v_pvcmz file cm_${fname}-plane.fix

#############################################
# -------- Start Actually Running --------- #
#############################################

## write restart file every 500 ps
restart 500000 restart-${metal}-${stoich}-${exclude}-${T1}K

# run 	10000 upto  	## run 10 ps, should be enough to average the RDF
# unfix MM_rdf_ave	## stop outputting M-M  RDF
# unfix MOi_rdf_ave	## stop outputting M-Oi RDF
# unfix MO_rdf_ave	## stop outputting M-O RDF

## dump full cell (all atoms) to be averaged later for FEFF: this is the pre-pulse
# dump prepump all atom 25 traj_${fname}-prepulse.dat  ## dump all ion positions every 5 steps
# dump_modify prepump sort id

# run 3000 upto
# undump prepump

#############################################
# ---------- Apply Field in NVE ----------- #
#############################################

# unfix 3             ## finish NVT
# fix 4 all nve       ## apply pulse in NVE

## apply the field
# fix             applyfield all efield v_Ex v_Ey v_Ez  # perturbation
# thermo_style custom step v_Timer cpu temp etotal fmax press v_Ex v_Ey v_Ez pe ke fmax
# thermo 10

## dump full cell (all atoms) to be averaged later for FEFF: this is the pumped material
# dump pumped all atom 5 traj_${fname}-pumped.dat  ## dump all ion positions every 5 steps
# dump_modify pumped sort id

# run   250   ## run simulation with applied field: this gets replaced in python
# unfix applyfield   ## Turn off the field
# undump pumped
# thermo 50

# run 4000 upto
# thermo 250
# run 5000 upto

#############################################
# ----- Long Running in Steady State ------ #
#############################################

# run     1000000 upto    ## run steady-state 1 ns

# undump M_vels ## stop outputting mobile-ion velocities for VACF
# undump Oi_vels
# undump Op_vels

# undump  6  ## stop outputting oxygen trajectories
# undump  7  ## stop outputting oxygen trajectories
# undump  8  ## stop outputting oxygen trajectories
# unfix   a2op    ## stop outputting oxygen a2 and msd
# unfix   a2oi    ## stop outputting oxygen a2 and msd
# unfix   a2ob    ## stop outputting oxygen a2 and msd

## stop outputting more stuff ... RDF / VACF

# run      5000000 upto   ## might need to split trajectory files here

run     100000000 upto   ## run the remainder of 100ns in steady state

unfix 3     ## for simulations without pump
# unfix 4
